classdef UR5e < handle
    properties
        UR5e_handle;
        moves = zeros(1);
        home = [-588.53, -133.30, 371.91, 2.2214, -2.2214, 0.00]; % [x,y,z,r,p,y]
        tool_height = 80;
        tcp_rotation = [2.2214, -2.2214, 0.00];
        pose_history;
        joint_position_history;
        joint_velocity_history;
        joint_acceleration_history;
        joint_torque_history;
    end

    methods
        %% Constructor.
        function obj = UR5e(host, port)
            obj.UR5e_handle = rtde(host, port);
            obj.UR5e_handle.movej(obj.home);
        end
        
        %% Destructor.
        function delete(obj)
            obj.UR5e_handle.close(); % Close connection.
        end
        
        %% Update home.
        function update_home(obj, home)
            obj.home = home;
        end

        %% Execute all moves.
        function execute(obj)
            fprintf("Program Started\n");
            for i = 1:length(obj.moves)
                fprintf("Moving to [%d, %d, %d, %d, %d, %d]\n", obj.moves(i));
                [pose, joint_position, joint_velocity, joint_acceleration, joint_torque] = obj.moves(i).execute();
                obj.pose_history(end + 1) = pose;
                obj.joint_position_history(end + 1) = joint_position;
                obj.joint_velocity_history(end + 1) = joint_velocity;
                obj.joint_acceleration_history(end + 1) = joint_acceleration;
                obj.joint_torque_history(end + 1) = joint_torque;
            end
            obj.UR5e_handle.movej(obj.home);
            fprintf("Program complete.\n");
        end

        %% Draw the moves.
        function draw(obj)
            obj.UR5e_handle.drawPath(obj.pose_history);
            obj.UR5e_handle.drawJointPositions(obj.pose_history);
            obj.UR5e_handle.drawJointVelocities(obj.pose_history);
            obj.UR5e_handle.drawJointAccelerations(obj.pose_history);
            obj.UR5e_handle.drawJointTorques(obj.pose_history);
        end
        
        %% Queue move.
        function add_move(obj, varargin)
            for i = 2:length(varargin)
                obj.moves(end + 1) = varargin{i};
            end
        end
        
        %% Get the TCP position.
        function pose = actual_pose(obj)
            pose = obj.UR5e_handle.actualPosePositions();
        end
    end
end
